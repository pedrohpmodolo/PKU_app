// lib/utils/profile_utils.dart

import 'dart:typed_data';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;

class ProfileUtils {
  static double? convertToKg(String weight, bool usesImperial) {
    final w = double.tryParse(weight);
    if (w == null) return null;
    return usesImperial ? w * 0.453592 : w;
  }

  // --- THIS IS THE UPDATED METHOD ---
  /// Converts height to cm. Handles a single value for metric, or feet and inches for imperial.
  static double? convertToCm(String height, bool usesImperial, {String? inches}) {
    if (!usesImperial) {
      // For metric, just parse the single value as cm
      return double.tryParse(height);
    } else {
      // For imperial, parse feet and inches and convert both to cm
      final feetValue = double.tryParse(height);
      final inchesValue = double.tryParse(inches ?? '0'); // Default to 0 if inches is null or empty
      
      if (feetValue == null || inchesValue == null) return null;

      // 1 foot = 30.48 cm, 1 inch = 2.54 cm
      return (feetValue * 30.48) + (inchesValue * 2.54);
    }
  }
  // ------------------------------------

  static int calculateAgeFromDate(DateTime birthDate) {
    final today = DateTime.now();
    int age = today.year - birthDate.year;
    if (today.month < birthDate.month ||
        (today.month == birthDate.month && today.day < birthDate.day)) {
      age--;
    }
    return age;
  }
  
  static int calculateAge(String dateStr) {
    try {
      final birthDate = DateTime.parse(dateStr);
      return calculateAgeFromDate(birthDate);
    } catch (_) {
      return 0;
    }
  }

  /// Calculates BMR (Basal Metabolic Rate) using Mifflin-St Jeor Equation
  static double? calculateBMR({
    required String gender,
    required double? weightKg,
    required double? heightCm,
    required int? ageYears,
  }) {
    if (weightKg == null || heightCm == null || ageYears == null) return null;

    if (gender.toLowerCase() == 'male') {
      return 10 * weightKg + 6.25 * heightCm - 5 * ageYears + 5;
    } else {
      return 10 * weightKg + 6.25 * heightCm - 5 * ageYears - 161;
    }
  }
  
  static double calculateCalories(double? bmr, String activityLevel) {
    if (bmr == null) return 0.0;
    switch (activityLevel.toLowerCase()) {
      case 'sedentary': return bmr * 1.2;
      case 'lightly active': return bmr * 1.375;
      case 'moderately active': return bmr * 1.55;
      case 'very active': return bmr * 1.725;
      default: return bmr * 1.2;
    }
  }

  /// Generates a comprehensive PDF from all profile data
  static Future<Uint8List> generateProfilePdf(Map<String, dynamic> profileData, String llmSummary) async {
    final pdf = pw.Document();

    pw.Widget buildRow(String title, String value) {
      if (value.isEmpty || value == 'N/A') return pw.SizedBox.shrink();
      return pw.Padding(
        padding: const pw.EdgeInsets.symmetric(vertical: 4),
        child: pw.Row(
          mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(title, style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
            pw.SizedBox(width: 20),
            pw.Expanded(child: pw.Text(value, textAlign: pw.TextAlign.right)),
          ],
        ),
      );
    }
    
    String boolToString(bool? value) => value == true ? 'Yes' : 'No';

    pdf.addPage(
      pw.Page(
        build: (pw.Context context) {
          final age = profileData['dob'] != null ? calculateAge(profileData['dob']).toString() : 'N/A';
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Header(
                level: 0,
                child: pw.Text('PKU Wise Profile Summary', style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold)),
              ),
              
              pw.Header(level: 1, text: 'AI-Generated Summary'),
              pw.Paragraph(text: llmSummary),
              pw.Text(
                'Note: This summary was generated by an AI assistant based on the provided profile data.',
                style: pw.TextStyle(fontStyle: pw.FontStyle.italic, color: PdfColors.grey600, fontSize: 9),
              ),
              pw.SizedBox(height: 20),

              pw.Header(level: 1, text: 'Profile Details'),
              pw.Divider(),
              
              buildRow('Name', profileData['name'] ?? 'N/A'),
              buildRow('Age', age),
              buildRow('Date of Birth', profileData['dob']?.split('T')[0] ?? 'N/A'),
              buildRow('Gender', profileData['gender'] ?? 'N/A'),
              
              pw.SizedBox(height: 10),
              pw.Divider(),
              
              buildRow('Weight', '${profileData['weight_kg']?.toStringAsFixed(1) ?? 'N/A'} kg'),
              buildRow('Height', '${profileData['height_cm']?.toStringAsFixed(1) ?? 'N/A'} cm'),
              buildRow('BMR', '${profileData['bmr']?.toStringAsFixed(0) ?? 'N/A'} kcal'),

              pw.SizedBox(height: 10),
              pw.Divider(),

              buildRow('Diagnosis Date', profileData['diagnosis_date']?.split('T')[0] ?? 'N/A'),
              buildRow('PKU Severity', profileData['pku_severity'] ?? 'N/A'),
              buildRow('Primary Hospital', profileData['metabolic_center'] ?? 'N/A'),
              
              pw.SizedBox(height: 10),
              pw.Divider(),
              
              buildRow('Diet Type', profileData['diet_type'] ?? 'N/A'),
              buildRow('Formula', profileData['formula_type'] ?? 'N/A'),
              buildRow('Daily PHE Tolerance', '${profileData['phe_tolerance_mg'] ?? 'N/A'} mg'),
              buildRow('Daily Protein Goal', '${profileData['protein_goal_g'] ?? 'N/A'} g'),
              buildRow('Daily Calorie Target', '${profileData['daily_calorie_target']?.toStringAsFixed(0) ?? 'N/A'} kcal'),
              buildRow('Activity Level', profileData['activity_level'] ?? 'N/A'),
              buildRow('Allergies', (profileData['allergies'] as List?)?.join(', ') ?? 'None'),
              buildRow('Disliked Ingredients', (profileData['disliked_ingredients'] as List?)?.join(', ') ?? 'None'),

              pw.SizedBox(height: 10),
              pw.Divider(),

              buildRow('Currently Pregnant', boolToString(profileData['pregnancy_status'])),
              buildRow('Currently Breastfeeding', boolToString(profileData['breastfeeding'])),
              buildRow('Needs Visual Aids', boolToString(profileData['needs_visual_aids'])),
              buildRow('Caregiver Access', boolToString(profileData['has_caregiver_access'])),
              buildRow('Language', profileData['language'] ?? 'N/A'),
            ],
          );
        },
      ),
    );

    return pdf.save();
  }
}